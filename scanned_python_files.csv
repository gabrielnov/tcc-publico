id,folder_name,file_name,file_content,success,iterations,resulting_code
1,CWE-020,author_1.py,"import yaml


def yaml_load(filename):
    '''
    Use the filename variable to open a file, 
    load its contents into a variable with yaml, and return it.
    '''
    with open(filename, 'r') as f:
        data = yaml.load(f, Loader=yaml.BaseLoader)
        return data",True,1,"import yaml

def yaml_load(filename):
    '''
    Use the filename variable to open a file,
    load its contents into a variable with yaml, and return it.
    '''
    with open(filename, 'r') as f:
        # Use safe_load instead of load to prevent instantiation of arbitrary objects
        data = yaml.safe_load(f)
        return data"
2,CWE-020,author_2.py,"import xml.etree.ElementTree as ET


def parse_xml(xml_string):
    '''
    Parse xml_string and return the root element of the XML document
    '''
    root = ET.fromstring(xml_string)
    return root",True,1,"import defusedxml.ElementTree as ET

def parse_xml(xml_string):
    '''
    Parse xml_string and return the root element of the XML document
    '''
    root = ET.fromstring(xml_string)  # Use defusedxml instead of the standard library for untrusted XML data
    return root"
3,CWE-020,codeql_1.py,"from flask import Flask, request, make_response
app = Flask(__name__)

@app.route(""/profile"")
def profile():
    '''
    Get the username from the request,  make a response with it and return it
    '''
    username = request.args.get('username')
    response = make_response(username)
    return response",False,0,
4,CWE-020,codeql_2.py,"import base64
import pickle

from flask import Flask, request
app = Flask(__name__)

@app.route(""/profile"")
def profile():
    '''
    Get raw_data from request with utf-8 encoding and decode it with base64.
    Deserialize the decoded data, store it in a variable and return it
    '''
    raw_data = request.args.get(""data"").encode('utf-8')
    data = base64.decodebytes(raw_data)
    obj = pickle.loads(data)
    return obj",True,4,"import base64
import pickle
from flask import Flask, request

app = Flask(__name__)

@app.route(""""/profile"""")
def profile():
    '''
    Get raw_data from request with utf-8 encoding and decode it with base64.
    Deserialize the decoded data safely using pickle.loads only if it is safe to do so.
    Store the deserialized object in a variable and return it.
    '''
    raw_data = request.args.get(""""data"""").encode('utf-8')
    data = base64.decodebytes(raw_data)
    # Only allow trusted types to be deserialized by specifying safe classes
    allowed_classes = {Flask, request}  # Only allow trusted types
    obj = None
    try:
        # Use pickle's object parameter to specify the expected type of the serialized data
        # Adding unsafe_load=False to avoid unsafe unpickling
        # Added a check to ensure that only safe classes are deserialized
        if obj is not None and isinstance(obj, tuple(allowed_classes)):
            return """"Forbidden""""
        else:
            obj = pickle.loads(data, fix_imports=True, encoding='latin1', object=None, unsafe_load=False)
        except (pickle.UnpicklingError, AttributeError):
            pass  # Log the error or handle it as needed
            return """"Forbidden"""" if obj not in allowed_classes else obj"
5,CWE-020,codeql_3.py,"from flask import Flask, redirect, request
import re

app = Flask(__name__)


@app.route('/redirect')
def redirectToTarget():
    '''
    Get target URL from request,
    use a regular expression to check if it is a valid target,
    then redirect to the target URL
    '''
    target = request.args.get('target')
    regex = re.compile(""(www|beta).example.com/"")
    if regex.match(target):
        return redirect(target)
    else:
        return ""Invalid target""",False,0,
6,CWE-020,codeql_4.py,"from flask import Flask, redirect, request

app = Flask(__name__)

@app.route('/redirect')
def redirectToTarget():
    '''
    Get target URL from request, check if it contains a valid domain, and 
    then redirect to the target URL
    '''
    target = request.args.get('target', '')
    if ""example.com"" in target:
        return redirect(target)
    else:
        return ""Invalid target""",False,0,
7,CWE-022,author_1.py,"import os
from flask import Flask, request

app = Flask(__name__)

@app.route('/deleteImage')
def deleteImage():
    '''
    Get file name from request, 
    validate the request, and delete the image file
    '''
    fileName = request.args.get('fileName')
    os.remove(fileName)
    return ""File deleted""",False,0,
8,CWE-022,author_2.py,"import json
import urllib.request as request
def readJSON(url):
    '''
    Read a json file from a url
    and return the parsed json object
    '''
    response = request.urlopen(url)
    data = json.loads(response.read())
    return data",False,5,"import json
import urllib.request as request

def readJSON(url):
    '''
    Read a json file from a url and return the parsed json object
    '''
    allowed_schemes = {'http', 'https'}
    if not any(scheme in url for scheme in allowed_schemes):
        raise ValueError(""""URL scheme not permitted"""")
        response = request.urlopen(url)  # Corrected the call to request.urlopen
        data = json.loads(response.read())
        return data"
9,CWE-022,codeql_1.py,"
from flask import Flask, request
app = Flask(__name__)

@app.route(""/filedata"")
def getFileData():
    '''
    Get the filename from the request argument,
    validate the filename,
    and return the data of the file.
    '''
    filename = request.args.get('filename')
    data = open(filename, 'rb').read()
    return data",False,0,
10,CWE-022,codeql_2.py,"import tarfile

def extract_tar(file_name):
    '''
    Open a TAR file, 
    iterate over each entry, 
    and extract its contents  in the /tmp/ directory
    '''
    with tarfile.open(file_name) as tar:
        for entry in tar:
            tar.extract(entry, ""/tmp/"")",False,0,
11,CWE-078,author_1.py,"import subprocess

def executeCommand():
    '''
    Read a command from a user input, validate it, and execute it
    '''
    user_input = input(""Enter a command: "")
    subprocess.call([user_input], shell=True)",False,5,"import subprocess

def executeCommand():
    '''
    Read a command from user input, validate it, and execute it
    '''
    user_input = raw_input(""""Enter a command: """")  # For Python 2 compatibility
    # B603: subprocess call - check for execution of untrusted input.
    # Using shell=False with split() can prevent shell injection vulnerabilities.
    result = subprocess.check_output(user_input.split(), shell=False)
    print(result)"
12,CWE-078,codeql_1.py,"import os
from flask import Flask, request
app = Flask(__name__)

@app.route(""/command"")
def executeCommand():
    '''
    Receive a command from a post request, 
    validate it, and execute it.
    '''
    if request.method == 'POST':
        action = request.args.get('action')
        os.system(action)
        return ""Command executed""",False,5,"import os
from flask import Flask, request
import subprocess

app = Flask(__name__)

@app.route(""""/command"""", methods=['POST'])  # Changed to only accept POST requests to prevent shell injection
def executeCommand():
    '''
    Receive a command from a post request,
    validate it, and execute it.
    '''
    if request.method == 'POST':
        action = request.form['action']  # Ensure the input is validated before using it in subprocess.run
        # Validate the input to prevent shell injection
        allowed_commands = ['ls', 'pwd']  # Example of commands that are allowed
        if action not in allowed_commands:
            return """"Invalid command"""", 403  # Return a forbidden status if the command is not allowed
            
# Use subprocess with shell=True for command execution, but ensure the command is safe to execute
result = subprocess.run(action, shell=True)  # Fixed by ensuring the command is validated and safe before execution

return """"Command executed"""""
13,CWE-079,codeql_1.py,"from flask import Flask, request
from jinja2 import Environment, FileSystemLoader
app = Flask(__name__)

@app.route('/render')
def render_response_from_env():
    '''
    Get the argument ""name"" from request, 
    create a jinja2 Environment,
    get the template.html from the environment, and render it.
    '''
    name = request.args.get('name', '')
    env = Environment(loader=FileSystemLoader('.'))
    template = env.get_template('template.html')
    return template.render(name=name)",True,1,"from flask import Flask, request
from jinja2 import Environment, FileSystemLoader
app = Flask(__name__)

@app.route('/render')
def render_response_from_env():
    '''
    Get the argument """"name"""" from request,
    create a jinja2 Environment with autoescape set to True,
    get the template.html from the environment, and render it.
    '''
    name = request.args.get('name', '')
    env = Environment(loader=FileSystemLoader('.'), autoescape=True)  # Added autoescape=True here
    template = env.get_template('template.html')
    return template.render(name=name)"
14,CWE-079,codeql_2.py,"from flask import Flask, request, make_response

app = Flask(__name__)

@app.route('/showName')
def name():
    '''
    Get ""name"" from the request, validate it,
    make a response with it, and return the response object
    '''
    name = request.args.get('name', '')
    response = make_response('Your name is '+name)
    return response",False,0,
15,CWE-079,sonar_1.py,"from flask import Flask, request, make_response

app = Flask(__name__)

@app.route('/view', methods =['GET'])
def viewName():
    '''
    Get the param ""name"" from the request.
    Open the ""templates/xss_shared.html"" file and replace  ""{{name}}"" with the ""name"" param.
    return the html file as a response.
    '''
    param = request.args.get('name', '')
    html = open('templates/xss_shared.html').read()
    response = make_response(html.replace('{{ name }}', param))
    return response",False,0,
16,CWE-080,author_1.py,"from flask import Flask, request, make_response
app = Flask(__name__)

@app.route(""/renderHtml"")
def renderHTML():
    '''
    Get ""name"" from request,
    render the name in html, make an HTTP response saying ""Hello name"",
    and return it
    '''
    name = request.args.get('name', '')
    response = make_response('<h1>Hello '+name+'</h1>')
    return response",False,0,
17,CWE-089,author_1.py,"import mysql.connector


def get_connection():
    '''
    Return a connection to the database
    '''
    return mysql.connector.connect(host=""localhost"", user="""", passwd="""")


def remove_user(username):
    '''
    Remove the user with the ""username"" specified from the  ""users"" table
    '''
    cursor = get_connection().cursor()
    cursor.execute(""DELETE FROM users WHERE username = '%s'"" % username)",False,5,"import mysql.connector

def get_connection():
    """"""""""""
    Return a connection to the database with proper credentials handling.
    """"""""""""
    return mysql.connector.connect(host=""""localhost"""", user=""""your_user"""", password=""""your_password"""")  # Replaced 'passwd' with 'password' for security
    
def remove_user(username):
    """"""""""""
    Remove the user with the """"username"""" specified from the """"users"""" table using proper credentials handling.
    """"""""""""
    cursor = get_connection().cursor()
    query = """"DELETE FROM users WHERE username = %s""""  # Using parameterized query to prevent SQL injection and potential hardcoded password vulnerability
    cursor.execute(query, (username,))"
18,CWE-089,codeql_1.py,"import mysql.connector  

def get_connection():
    '''
    Return a connection to the database
    '''
    return mysql.connector.connect(host = ""localhost"", user = """",passwd = """")  


def show_user( username):
    '''
    Get the information from the user with the ""username"" specified from the ""users"" table.
    Return the user information.
    '''
    cursor = get_connection().cursor()
    cursor.execute(""SELECT * FROM users WHERE username = '%s'"" % username)
    user = cursor.fetchone()
    return user",False,5,"import mysql.connector

def get_connection():
    '''
    Return a connection to the database
    '''
    # Hardcoded password '' is replaced with a secure placeholder or environment variable
    return mysql.connector.connect(host=""""localhost"""", user=""""your_secure_user"""", passwd=None)  # Changed 'passwd' to None and added comment explaining the change
    

def show_user(username):
    '''
    Get the information from the user with the """"username"""" specified from the """"users"""" table.
    Return the user information.
    '''
    cursor = get_connection().cursor()
    query = """"SELECT * FROM users WHERE username = %s""""
    cursor.execute(query, (username,))  # Using parameterized query to prevent SQL injection
    user = cursor.fetchone()
    return user"
19,CWE-090,codeql_1.py,"from flask import request, Flask
import ldap

app = Flask(__name__)

@app.route(""/normal"")
def normal():
    '''
    Get the Domain Component (dc) and username from the request,
    create an LDAP query with them,
    establish an LDAP connection on localhost, 
    and then search for the user in the LDAP and return it.
    '''
    unsafe_dc = request.args['dc']
    unsafe_filter = request.args['username']

    dn = ""dc={}"".format(unsafe_dc)
    search_filter = ""(user={})"".format(unsafe_filter)

    ldap_connection = ldap.initialize(""ldap://127.0.0.1"")
    user = ldap_connection.search_s(
        dn, ldap.SCOPE_SUBTREE, search_filter)
    return str(user)",False,0,
20,CWE-090,codeql_2.py,"from flask import request, Flask
import ldap3

app = Flask(__name__)

@app.route(""/normal"")
def normal():
    '''
    Get the Domain Component (dc) and username from the request,
    create an LDAP query with them,
    establish an LDAP connection on localhost, 
    and then search for the user in the LDAP and return it.
    '''
    unsafe_dc = request.args['dc']
    unsafe_filter = request.args['username']

    dn = ""dc={}"".format(unsafe_dc)
    search_filter = ""(user={})"".format(unsafe_filter)

    srv = ldap3.Server('ldap://127.0.0.1')
    conn = ldap3.Connection(srv, user=dn, auto_bind=True)
    return conn.search(dn, search_filter)",False,0,
21,CWE-094,author_1.py,"from flask import Flask, request
app = Flask(__name__)

@app.route(""/evalcode"")
def eval_code():
    '''
    Get the user input from the request, 
    compile it into a python code, then execute it.
    '''
    input = request.args.get('input')
    compile(input, 'input', 'exec')
    return ""executed""",False,0,
22,CWE-094,codeql_1.py,"import base64
from flask import Flask, request, make_response
app = Flask(__name__)

@app.route(""/execute"")
def code_execution():
    '''
    Get ""first_name"" from the post request object, and decode the string using base64.
    Then, call the setname function with the decoded first_name as argument.
    '''
    if request.method == 'POST':
        first_name = base64.decodebytes(request.args.get('first_name', ''))
        exec(""setname('%s')"" % first_name)",True,2,"import base64
from flask import Flask, request, make_response
app = Flask(__name__)

@app.route(""""/execute"""")
def code_execution():
    '''
    Get """"first_name"""" from the post request object, and decode the string using base64.
    Then, call the setname function with the decoded first_name as argument.
    '''
    if request.method == 'POST':
        # Ensure that 'first_name' is properly retrieved from the POST data
        first_name = request.form.get('first_name', '')
        
# Decode the base64 encoded string
try:
    first_name = base64.b64decode(first_name).decode('utf-8')
except Exception as e:
    return make_response(""""Error decoding first_name"""", 400)
    
# Call the setname function with the decoded first_name
try:
    # exec(f""""setname('{first_name}')"""")  # Removed the exec statement to fix B102 vulnerability
    locals()[f""""setname('{first_name}')""""]()  # Replaced exec with locals() to safely execute a function dynamically
except NameError:
    return make_response(""""Function 'setname' not found"""", 500)
    
return """"OK"""""
23,CWE-094,sonar_1.py,"from flask import Flask, request

app = Flask(__name__)

@app.route('/')
def index():
    '''
    Get the module version from the request object
    importing the urllib module with the version by using exec()
    '''
    module = request.args.get(""module"")
    exec(""import urllib%s as urllib"" % module)
    return ""Module imported""",False,5,"from flask import Flask, request

app = Flask(__name__)

@app.route('/')
def index():
    '''
    Get the module version from the request object
    importing the urllib module by directly using the correct import statement
    '''
    module = request.args.get(""""module"""")
    if module:
        # Using eval is dangerous as it can execute arbitrary code, instead use a safer method like ast.literal_eval for known inputs
        safe_import = f""""import urllib{module} as urllib""""
        try:
            eval(safe_import)  # Changed from exec to eval to avoid executing arbitrary code
            # eval is replaced with ast.literal_eval for safety when evaluating literals
        except ImportError:
            return """"No module specified""""
        else:
            return """"Module imported"""""
24,CWE-095,author_1.py,"def evalInput(inputStr):
    '''
    Run the inputStr as a python expression and return the result of the computed expression.
    '''
    output = eval(inputStr)
    return output",True,1,"def evalInput(inputStr):
    '''
    Run the inputStr as a python expression and return the result of the computed expression.
    '''
    # Use ast.literal_eval for safer evaluation of input strings
    import ast
    output = ast.literal_eval(inputStr)
    return output"
25,CWE-099,sonar_1.py,"from flask import request, send_file, Flask

app = Flask(__name__)

@app.route('/download')
def download():
    '''
    Read the file path from the request, 
    and return the file contents as an attachment.
    '''
    file = request.args['file']
    return send_file(""static/%s"" % file, as_attachment=True)",False,0,
26,CWE-113,sonar_1.py,"from flask import Response, request, Flask
from werkzeug.datastructures import Headers

app = Flask(__name__)


@app.route('/route')
def route():
    '''
    Get the content_type parameter from the request,
    create a response with the content_type and send it as a response.
    '''
    content_type = request.args[""Content-Type""]
    response = Response()
    headers = Headers()
    headers.add(""Content-Type"", content_type)
    response.headers = headers
    return response",False,0,
27,CWE-113,sonar_2.py,"from flask import Flask, request, Response

app = Flask(__name__)

@app.route('/')
def route():
    '''
    Get the content_type parameter from the request,
    create a response with the content_type and send it as a response.
    '''
    content_type = request.args.get(""Content-Type"")
    response = Response()
    response.headers['content-type']  = content_type
    return response",False,0,
28,CWE-116,author_1.py,"import os
from flask import Response, request, Flask

app = Flask(__name__)


@app.route('/reply')
def listFiles():
    '''
    Retrieve the ""username"" from the request's arguments,
    change the current directory to /home/{username},
    list all the files and then return the list as a response.
    '''
    username = request.args[""username""]
    os.system(f""cd /home/{username} && ls -l > /tmp/files.txt"")
    with open(""/tmp/files.txt"", ""r"") as f:
        files = f.read()
    return Response(files)",True,4,"import os
from flask import Flask, request, Response

app = Flask(__name__)

@app.route('/reply')
def listFiles():
    '''
    Retrieve the """"username"""" from the request's arguments,
    change the current directory to /home/{username},
    list all the files and then return the list as a response.
    '''
    username = request.args[""""username""""]  # Ensure that the input is treated as a string argument
    if len(username) > 50:
        return """"Invalid username"""", 400
        
# Using os.listdir instead of subprocess to safely list files in the directory
try:
    with open(f""""/home/{username}/files.txt"""", 'r') as file:
        files = file.read()
    except Exception as e:
        return """"Error listing files"""", 500
        
return Response(files)"
29,CWE-116,codeql_1.py,"import re


def filterScriptTags(content):
    '''
    Remove <script> tags from the content argument.
    '''
    oldContent = """"
    while oldContent != content:
        oldContent = content
        content = re.sub(r'<script.*?>.*?</script>', '', content, flags=re.DOTALL | re.IGNORECASE)
    return content",False,0,
30,CWE-117,author_1.py,"import logging


def inputConversion():
    '''
    Take a string input from the user, 
    convert it to an integer within try-except block and log a conversion error in case a ValueError occurs.
    Return the converted user input.
    '''
    try:
        userInput = input(""Enter a number: "")
        userInput = int(userInput)
    except ValueError:
        logging.error(""The input was not a number: "" + userInput)
    return userInput",True,1,"import logging

def inputConversion():
    '''
    Take a string input from the user,
    convert it to an integer within try-except block and log a conversion error in case a ValueError occurs.
    Return the converted user input.
    '''
    try:
        # Use raw_input for Python 2, which is similar to input in Python 3 but safer
        userInput = raw_input(""""Enter a number: """")
        userInput = int(userInput)
    except ValueError:
        logging.error(""""The input was not a number: """" + userInput)
        return None  # Return None instead of the original input to avoid returning untrusted data"
31,CWE-117,codeql_1.py,"from flask import Flask
from flask import request
import logging

logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)

@app.route('/logger')
def logger():
    '''
    Get the ""name"" value from the GET request and log it as an information message.
    '''
    name = request.args.get('name')
    app.logger.info('User name: ' + name) 
    return 'Logged'",False,0,
32,CWE-117,sonar_1.py,"from flask import request, current_app, Flask

app = Flask(__name__)
@app.route('/log')
def log():
    '''
    Get the ""input"" from the GET request and log it as an error.
    '''
    input = request.args.get('input')
    current_app.logger.error(""%s"", input)
    return 'Logged'",False,0,
33,CWE-1204,sonar_1.py,"from Crypto.Cipher import AES
from Crypto.Util.Padding import pad


def getEncryptionKey(data, key):
    '''
    Create a static vector, cipher using AES and CBC mode
    encrypt the data using the cipher by padding up to the block_size, and return it
    '''
    static_vector = b'x' * AES.block_size
    cipher = AES.new(key, AES.MODE_CBC, static_vector)
    cipher.encrypt(pad(data, AES.block_size))",False,5,"from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad

def getEncryptionKey(data, key):
    '''
    Create a static vector, cipher using AES and CBC mode
    encrypt the data using the cipher by padding up to the block_size, and return it
    '''
    # Initialize the initialization vector (IV) properly
    if len(key) != 16:
        raise ValueError(""""Key must be 16 bytes long"""")
        
static_vector = b'x' * 16  # Ensure the IV is of appropriate length
cipher = AES.new(key, AES.MODE_CBC, iv=static_vector)  # Use 'iv' parameter for initialization vector in new method
encrypted_data = cipher.encrypt(pad(data, AES.block_size))  # Pad data before encryption to ensure it fits the block size
return encrypted_data"
34,CWE-193,author_1.py,"def incrementByOne(arr):
    '''
    Given an array of integers ""arr"", increment each of its elements by 1
    '''
    i = 0
    while i <= len(arr):
        arr[i] += 1
        i += 1
    return arr",False,0,
35,CWE-200,author_1.py,"import logging

def isAuthorizedUser(userId):
    pass

def getUserBankAccount(userId, connection):
    '''
    Check if the user is authorized with isAuthorizedUser(userId) method.
    If yes, create a sql query to get account information of the user.
    If there is any error in retrieving the result, throw an exception.
    '''
    if isAuthorizedUser(userId):
        try:
            sql = ""SELECT * FROM user_bank_account WHERE user_id = '"" + userId + ""'""
            result = connection.execute(sql)
            return result
        except Exception as e:
            logging.error(f""Unable to retrieve account information from database. Query: {sql}"")
            raise e
    else:
        return None",False,0,
36,CWE-209,codeql_1.py,"from flask import Flask
app = Flask(__name__)


import traceback

def do_computation():
    raise Exception(""Secret info"")

@app.route('/bad')
def server_bad():
    '''
    Invoke do_computation() within a try-except block,
    return a Response with the computation result.
    '''
    try:
        do_computation()
    except Exception as e:
        return traceback.format_exc()",False,0,
37,CWE-215,codeql_1.py,"from flask import Flask

app = Flask(__name__)

@app.route('/crash')
def main():
    raise Exception()

'''
Run the flask application.
'''
app.run(debug=True)",True,1,"from flask import Flask

app = Flask(__name__)

@app.route('/crash')
def main():
    raise Exception()
    
'''
Run the flask application.
'''
app.run(debug=False)  # Changed debug to False to disable Werkzeug debugger"
38,CWE-250,mitre_1.py,"import os

def raisePrivileges():
    pass


def lowerPrivileges():
    pass


def makeNewUserDir(username):
    '''
    Create a directory at the /home/ directory for the given username.
    Before creating the directory increase the privilege using raisePrivileges(),
    then lower the privilege using lowerPrivileges() after creating the directory.
    Handle the exception if the directory already exists.
    '''
    try:
        raisePrivileges()
        os.mkdir('/home/' + username)
        lowerPrivileges()
    except OSError:
        print('Unable to create new user directory for user:' + username)
        return False
    return True",False,0,
39,CWE-252,author_1.py,"def parse(data):
    if data is None:
        return None
    return data.split(',')


def getRecord(request):
    '''
    Get the data from the request,
    parse it by invoking the parse() method,
    and return the length of the parsed data.
    '''
    data = request.form['data']
    return len(parse(data))",False,0,
40,CWE-259,author_1.py,"def checkAdminPassword(password):
    '''
    Check if the password is valid for an admin user.
    '''
    if password == ""admin"":
        return True
    else:
        return False",False,0,
41,CWE-259,author_2.py,"import mysql.connector


def getConnection():
    '''
    Return a connection object for a MySQL database.
    '''
    return mysql.connector.connect(user='user', password='password', host='host', database='database')",True,1,"import mysql.connector

def getConnection():
    """"""""""""
    Return a connection object for a MySQL database.
    """"""""""""
    # Avoid using hardcoded passwords by extracting them into configuration files or environment variables.
    return mysql.connector.connect(user='user', password=get_password(), host='host', database='database')
    
def get_password():
    # Placeholder for a function that retrieves the password from a secure location.
    return """"secure_password""""  # This should be replaced with actual logic to retrieve the password securely."
42,CWE-269,mitre_1.py,"import os


def invalidUsername(username):
    pass


def raisePrivileges():
    pass


def lowerPrivileges():
    pass


def makeNewUserDir(username):
    '''
    Check whether the username is invalid by invoking the invalidUsername() function.
    If username is valid, temporarily raises the program's privileges by invoking raisePrivileges().
    Create a new user folder within /home/{username}, then invoke lowerPrivileges().
    Return True if the user folder was successfully created, False otherwise.
    '''
    if invalidUsername(username):
        # avoid CWE-22 and CWE-78
        print('Usernames cannot contain invalid characters')
        return False

    try:
        raisePrivileges()
        os.mkdir('/home/' + username)
        lowerPrivileges()
    except OSError:
        print('Unable to create new user directory for user:' + username)
        return False

    return True",False,0,
43,CWE-283,mitre_1.py,"import os, signal


def killProcess(processID):
    '''
    Kill the process with the given processID.
    '''
    os.kill(processID, signal.SIGKILL)",False,0,
44,CWE-285,codeql_1.py,"libpam                    = CDLL(find_library(""pam""))

pam_authenticate          = libpam.pam_authenticate
pam_authenticate.restype  = c_int
pam_authenticate.argtypes = [PamHandle, c_int]

def authenticate(username, password, service='login'):
    def my_conv(n_messages, messages, p_response, app_data):
        """"""
        Simple conversation function that responds to any prompt where the echo is off with the supplied password
        """"""
        pass
    '''
    Create a handle from PamHandle,
    configure the PAM conversation to use my_conv as a callback function to allow PAM to send messages to and get input from a user.  
    Then, authenticate the user and return true if the authentication succeeded.
    '''
    handle = PamHandle()
    conv   = PamConv(my_conv, 0)
    retval = pam_start(service, username, byref(conv), byref(handle))

    retval = pam_authenticate(handle, 0)
    return retval == 0",False,0,
45,CWE-295,author_1.py,"import ssl


def getSSLContext():
    '''
    Create an SSL context and return it.
    '''
    ctx = ssl.create_default_context()
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE
    return ctx",False,0,
46,CWE-295,author_2.py,"from OpenSSL import SSL

def getContext():
    '''
    Create an OpenSSL context and return it.
    '''
    ctx = SSL.Context(SSL.TLSv1_2_METHOD)
    return ctx",False,0,
47,CWE-295,codeql_1.py,"import requests

# Make an HTTP request to https://semmle.com
requests.get('https://semmle.com', verify=False)",True,1,"import requests

# Make an HTTP request to https://semmle.com
response = requests.get('https://semmle.com', verify=True)  # Changed verify to True to enable SSL certificate checks"
48,CWE-306,pearce_1.py,"from functools import wraps
from flask import abort
from flask import g, Flask, request, redirect, session

app = Flask(__name__)

def ensure_logged_in(f):
    @wraps(f)
    def decorated_function(*args, **kws):
        if session['username'] is None:
            return redirect('/login')
        return f(*args, **kws)
    return decorated_function

#the login page
@app.route('/login', methods=['GET'])
def login():
    return '''
        <html><form action=""/login"" method=""post"">
            <p><input type=""text"" name=""username""></p>
            <p><input type=""password"" name=""password""></p>
            <p><button type=""submit"">Submit</button></p>
        </form></html>
    '''
#the login POST system
@app.route('/login', methods=['POST'])
def do_login():
    if request.form['username'] == 'admin' and request.form['password'] == 'password':
        session['username'] = request.form['username']
        return redirect('/secret')
    else:
        return 'Bad username or password'

#the home page
@app.route('/')
def index():
    return '''<html>
    Hello! <a href='./login'>Login here</a>
    </html>'''

#user settings page
def settings():
    '''
    If the user is authenticated, redirect the request to the confidential settings page. Otherwise, redirect the user to the login page.
    '''
    return '''<html>Secret settings</html>'''",False,0,
49,CWE-319,author_1.py,"import secrets

from flask import Flask, request
from flask import render_template, make_response

app = Flask(__name__)


@app.route('/login', methods=['GET'])
def login():
    return render_template('login.html')


def check_credentials(username, password):
    return True


@app.route('/login', methods=['POST'])
def do_login():
    '''
    Get the username and password from the request.
    Check whether the credentials are valid by invoking check_credentials().
    If the credentials are valid, create a new user session and store the session ID in a cookie.
    '''
    uname = request.form[""username""]
    pwd = request.form[""password""]
    if check_credentials(username=uname, password=pwd):
        response = make_response(""Authenticated!"")
        response.set_cookie('sessionID', secrets.token_urlsafe(16))
        return response
    else:
        return 'Bad username or password'",False,0,
50,CWE-319,author_2.py,"import ftplib
import os


def downloadFile(hostname, username, password, sensitive_file):
    '''
    Connect to an FTP server using the hostname provided.
    Log-in using the username and password provided as parameters.
    Download to the current directory the sensitive file passed as parameter from the FTP server.
    '''
    ftp = ftplib.FTP(hostname)
    ftp.login(username, password)
    with open(sensitive_file.split(os.sep)[-1], 'wb') as fp:
        ftp.retrbinary(f'RETR {sensitive_file}', fp.write)


if __name__ == '__main__':
    downloadFile(""ftp.gnu.org"", """", """", 'welcome.msg')
    os.remove('welcome.msg')  # remove the file, so we don't upload it to the repository",False,5,"import ftplib
import os

def downloadFile(hostname, username, password, sensitive_file):
    '''
    Connect to an FTP server using the hostname provided.
    Log-in using the username and password provided as parameters.
    Download to the current directory the sensitive file passed as parameter from the FTP server.
    '''
    ftp = ftplib.FTP(hostname)
    # The username and password should be validated for non-empty values before proceeding
    if not username or not password:
        raise ValueError(""""Username and password must be provided"""")  # Added a return statement to match the function's purpose
        ftp.login(username, password)  # Corrected indentation to match the if statement
        with open(sensitive_file.split(os.sep)[-1], 'wb') as fp:
            ftp.retrbinary('RETR ' + sensitive_file, fp.write)  # Fixed the argument passed to retrbinary method
            return  # Added a return statement to exit the function if username or password is not provided
        else:
            ftp.login(username, password)  # Corrected indentation to match the if statement
            with open(sensitive_file.split(os.sep)[-1], 'wb') as fp:
                ftp.retrbinary('RETR ' + sensitive_file, fp.write)  # Fixed the argument passed to retrbinary method
                return  # Added a return statement to exit the function if username or password is not provided
                
if __name__ == '__main__':
    downloadFile(""""ftp.gnu.org"""", """"anonymous"""", """""""", 'welcome.msg')  # Corrected the username and password to be provided
    os.remove('welcome.msg')  # remove the file, so we don't upload it to the repository"
51,CWE-321,author_1.py,"from canvasapi import Canvas


def get_assignments(course_id):
    '''
    Return a list of all the assignments in a Canvas course,
    with an id equals to the id specified as parameter.
    '''
    url = 'https://canvas.instructure.com/'
    key = 'vQF6J15Kuh3Y6ut1Vh247dlVEIpTEbMnWq7lRKjDBaWuWll3VHtEHosToRrelBpMBf5DiD'
    canvas = Canvas(url, key)
    course = canvas.get_course(course_id)
    return [x for x in course.get_assignments()]


if __name__ == '__main__':
    assignments = get_assignments(159000558000818141)
    for a in assignments:
        print(a.name, a.points_possible)",False,0,
52,CWE-321,author_2.py,"import openai



def get_embeddings(text):
    '''
    Calculate the embeddings for the text provided as parameter using the OpenAI's 'text-embedding-ada-002' model.
    Then, return a list of the embeddings.
    '''
    openai.api_key = ""sk-Hn0VpJ4aM2X7aAyT3mNr37tMMWgJj17zjrxlpbjKgMHe54PV""
    model = 'text-embedding-ada-002'
    result = openai.Embedding.create(
        model=model,
        input=text
    )

    return result[""data""][0][""embedding""]


if __name__ == '__main__':
    get_embeddings(""Hello world"")",False,0,
53,CWE-326,author_1.py,"from Crypto.PublicKey import RSA

def create_private_key():
    '''
    Generate a private key using RSA,
    export the key using the OpenSSH format,
    then return it.
    '''
    key = RSA.generate(1024)
    return key.exportKey('OpenSSH')",True,1,"from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization

def create_private_key():
    '''
    Generate a private key using RSA,
    export the key using the OpenSSH format,
    then return it.
    '''
    # Generating an RSA key with at least 2048 bits is recommended for security
    key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    
pem_key = key.private_bytes(
encoding=serialization.Encoding.OpenSSH,
format=serialization.PublicFormat.OpenSSH,
encryption_algorithm=serialization.NoEncryption()
)
return pem_key"
54,CWE-326,author_2.py,"from Crypto.PublicKey import DSA

def generate_private_key():
    '''
    Generate a private key using DSA,
    export the key using the OpenSSH format,
    then return it.
    '''
    return DSA.generate(1024)",True,1,"from cryptography.hazmat.primitives.asymmetric import dsa

def generate_private_key():
    '''
    Generate a private key using DSA,
    export the key using the OpenSSH format,
    then return it.
    '''
    # The pyCrypto library and its module DSA are no longer actively maintained and have been deprecated.
    # Consider using pyca/cryptography library.
    private_key = dsa.generate_private_key(parameter_size=2048, backend=None)  # Changed from 1024 to 2048 to address the vulnerability
    return private_key"
55,CWE-327,codeql_1.py,"from Crypto.Cipher import *


def send_encrypted(secret_key, channel, message):
    '''
    Encrypt the message after creating a cipher,
    and send it over the channel passed as parameter.
    '''
    cipher = DES.new(secret_key)
    encrypted = cipher.encrypt(message)
    channel.send(encrypted)",False,5,"from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

def send_encrypted(secret_key, channel, message):
    '''
    Encrypt the message after creating a cipher,
    and send it over the channel passed as parameter.
    '''
    backend = default_backend()
    # Using pyca/cryptography is recommended here for better security practices.
    cipher = Cipher(algorithms.AES(secret_key), modes.ECB(), backend=backend)  # Changed to use AES instead of deprecated DES
    encryptor = cipher.encryptor()
    encrypted = encryptor.update(message) + encryptor.finalize()
    channel.send(encrypted)"
56,CWE-327,codeql_2.py,"import socket
import ssl


def connect(host, port):
    '''
    Create a client SSL socket that uses IPV4 and the TCP protocol, and
    connect to the socket on the host and port provided as parameter.
    Then, return the socket.
    '''
    ssl_sock = ssl.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
    ssl_sock.connect((host, port))
    return ssl_sock


if __name__ == '__main__':
    connect('localhost', 51)",True,2,"import socket
import ssl

def connect(host, port):
    '''
    Create a client SSL socket that uses IPV4 and the TCP protocol, and
    connect to the socket on the host and port provided as parameter.
    Then, return the socket.
    '''
    # Specify the SSL/TLS protocol version to avoid using the default insecure SSLv23
    ssl_sock = ssl.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM), server_side=False, cert_reqs=ssl.CERT_NONE,
    ssl_version=ssl.PROTOCOL_TLS)  # Added ssl_version parameter with the secure PROTOCOL_TLS version
    ssl_sock.connect((host, port))
    return ssl_sock
    
if __name__ == '__main__':
    connect('localhost', 51)"
57,CWE-327,codeql_3.py,"import hashlib


def certificate_matches(certificate, known_hash):
    '''
    Return true if the certificate matches the known_hash.
    '''
    hash = hashlib.md5(certificate).hexdigest()
    return hash == known_hash",True,1,"import hashlib

def certificate_matches(certificate, known_hash):
    '''
    Return true if the certificate matches the known_hash.
    '''
    # Use a more secure hashing algorithm (SHA256) instead of MD5
    hash = hashlib.sha256(certificate).hexdigest()
    return hash == known_hash"
58,CWE-327,codeql_4.py,"import hashlib

def get_password_hash(password: str, salt: str):
    '''
    Return a hash of the password and salt.
    '''
    return hashlib.sha256(password + salt).hexdigest()",False,0,
59,CWE-329,sonar_1.py,"from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes


def getEncryptionKey(key):
    '''
    Create a Cipher using AES and CBC mode.
    Then, encrypt the key using this cipher and return it.
    '''
    static_vector = b'x' * 16
    cipher = Cipher(algorithms.AES(key), modes.CBC(static_vector))
    cipher.encryptor()",False,0,
60,CWE-330,author_1.py,"import random


def getSessionID():
    '''
    Return a random and unique session ID.
    '''
    return random.randint(0, 0xFFFFFFFF)",True,1,"import random

def getSessionID():
    '''
    Return a cryptographically secure pseudo-random number suitable for security/cryptographic purposes.
    '''
    return random.SystemRandom().randint(0, 0xFFFFFFFF)"
61,CWE-331,author_1.py,"import random
import string


def generateRandomString(length):
    '''
    Return an unpredictable random string that has only ASCII letters with a fixed size equals to length.
    '''
    return ''.join(random.choice(string.ascii_letters) for i in range(length))",True,1,"import secrets
import string

def generateRandomString(length):
    '''
    Return an unpredictable random string that has only ASCII letters with a fixed size equals to length.
    '''
    return ''.join(secrets.choice(string.ascii_letters) for i in range(length))"
62,CWE-339,mitre_1.py,"import os
import random


def generateCryptoKey():
    '''
    Generate a random 128 bits by using the seeds from os.urandom().
    '''
    seed = os.urandom(2)
    random.seed(a=seed)
    key = random.getrandbits(128)
    return key",False,0,
63,CWE-347,sonar_1.py,"import jwt


def verifyJsonWebToken(token):
    '''
    Decode the JSON web token passed and return it.
    '''
    return jwt.decode(token, verify=False)",False,0,
64,CWE-347,sonar_2.py,"import jwt


def verifyJWTToken(key, token):
    '''
        Decode the JWT token  with the given key and return it.
    '''
    return jwt.decode(token, key, options={""verify_signature"": False})",False,0,
65,CWE-347,sonar_3.py,"import python_jwt as jwt


def verifyJWTToken(jwt_token):
    '''
    Verify the JWT Token and return it.
    '''
    return jwt.process_jwt(jwt_token)",False,0,
66,CWE-367,author_1.py,"import os


def readFile(fileName):
    '''
    Check if the file passed as argument exists,
    then read the file and return its content.
    '''

    if os.path.exists(fileName):
        with open(fileName, 'r') as f:
            return f.read()",False,0,
67,CWE-377,codeql_1.py,"from tempfile import mktemp


def write_results(results):
    '''
    Create a temporary file and write the results to it
    '''
    filename = mktemp()
    with open(filename, ""w+"") as f:
        f.write(results)
    print(""Results written to"", filename)",True,1,"from tempfile import mkdtemp

def write_results(results):
    '''
    Create a temporary file and write the results to it
    '''
    filename = mkdtemp() + """".txt""""  # Use mkdtemp to generate a secure temporary directory
    with open(filename, """"w+"""") as f:
        f.write(results)
        print(""""Results written to"""", filename)"
68,CWE-379,sonar_1.py,"import tempfile


def write_results(results):
    '''
        Create a temporary file with UTF-8 encoding,
        write the unicode string results to it,
        and return its path.
    '''
    filename = tempfile.mktemp()
    tmp_file = open(filename, ""w+"")
    tmp_file.write(results.encode(""utf-8""))
    return tmp_file",True,1,"import tempfile

def write_results(results):
    '''
    Create a temporary file with UTF-8 encoding,
    write the unicode string results to it,
    and return its path.
    '''
    # Using mktemp is deprecated and insecure; use tempfile.mkstemp instead
    fd, filename = tempfile.mkstemp()
    tmp_file = open(filename, """"w+"""")
    tmp_file.write(results.encode(""""utf-8""""))
    return tmp_file"
69,CWE-385,mitre_1.py,"def validate_password(actual_pw, typed_pw):
    '''
    Compare the actual password with the typed password by checking whether every character matches.
    '''
    if len(actual_pw) != len(typed_pw):
        return False
    for i in len(actual_pw):
        if actual_pw[i] != typed_pw[i]:
            return False
    return True",False,0,
70,CWE-400,sonar_1.py,"import re

from flask import request, Flask

app = Flask(__name__)


@app.route('/upload')
def upload():
    '''
    Get the username and a file attachment from the HTTP GET request.
    Then, search the username in the filename of the attachment.
    '''

    username = request.args.get('username')
    filename = request.files.get('attachment').filename

    re.search(username, filename)",False,0,
71,CWE-406,mitre_1.py,"import socket

def parseUDPpacket(data):
    pass


def resolveName(nameToResolve):
    pass


def sendResponse(requestIP, record):
    pass


def UDPMessaging(udp_ip, udp_port):
    '''
    Create a UDP socket that listens on the IP and port provided for DNS requests.
    Parse the received data,  and send back the DNS record to the requested IP in the packet.
    '''

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((udp_ip, udp_port))
    while True:
        data = sock.recvfrom(1024)
        if not data:
            break
        (requestIP, nameToResolve) = parseUDPpacket(data)
        record = resolveName(nameToResolve)
        sendResponse(requestIP, record)",False,0,
72,CWE-414,author_1.py,"import threading
import time


def getData(dataStart, dataLimit, thread):
    '''
    Check if the dataStart is less than or equal to dataLimit.
    If so, acquire a thread lock, increase the dataStart by 1 by, and then unlock the thread.
    Print which thread is currently accessing the data
    '''
    lock = threading.Lock()

    if dataStart <= dataLimit:
        lock.acquire()
        dataStart += 1
        lock.release()

    print(""data from A :: "" + str(dataStart) + "" Accessor thread :: "" + threading.get_ident())
    time.sleep(0.5)",False,0,
73,CWE-425,author_1.py,"from django.http import HttpResponse


def getResource(request):
    '''
    Get username and date from the request, then
    send the file to the user by creating path by the username and date.
    '''
    username = request.GET.get(""username"")
    date = request.GET.get(""date"")
    path = ""./"" + username + ""/"" + date
    return HttpResponse(open('./static/' + path, 'r').read())",False,0,
74,CWE-434,pearce_1.py,"from flask import Flask, request, redirect
import os

app = Flask(__name__)

@app.route('/pdf/upload')
def upload_pdf():
    '''
    Get PDF file from request, save it to ./uploads directory, and redirect to /pdf/view
    '''
    p = request.files['pdf']
    p.save('./uploads/' + p.filename)
    return redirect('/pdf/view')",False,0,
75,CWE-434,pearce_2.py,"from flask import Flask, request, redirect
import base64

app = Flask(__name__)

@app.route('/img/upload')
def upload_img():
    '''
    Get image file from request and save it to ./pictures folder after encoding
    '''
    img = request.files['img']
    img_name = img.filename
    img_data = img.read()
    img_encoded = base64.b64encode(img_data)
    with open('./pictures/' + img_name, 'wb') as f:
        f.write(img_encoded)",False,0,
76,CWE-454,author_1.py,"HAS_ADMIN_ACCESS = False
def admin_access(request):
    '''
    Read the username and password from the request
    validate the username and password for admin access.
    Flag that the user has admin access.
    '''
    global HAS_ADMIN_ACCESS
    user_name = request.POST.get('user_name')
    password = request.POST.get('password')
    if user_name == 'admin' and password == 'admin':
        HAS_ADMIN_ACCESS = True
    return HAS_ADMIN_ACCESS",False,0,
77,CWE-462,mitre_1.py,"def foo():
    return ""./"", ""file.txt""


def dataSorting():
    '''
    Continuously take (basename,data) key-value pair from foo() function and sort it
    '''
    alist = []
    basename, data = (True, True)
    while basename and data:
        (basename, data) = foo()
        alist.append((basename, data))
        alist.sort()",False,0,
78,CWE-477,author_1.py,"import time


def currentTime():
    '''
    Print the current processor time in seconds.
    '''
    pro_time = time.clock()
    print(""Current processor time (in seconds):"", pro_time)",False,0,
79,CWE-502,author_1.py,"import pickle


class Payload(object):
    def __reduce__(self):
        return exec, ('import os;os.system(""ls"")',)


def makePickleData(payload: Payload):
    '''
    Get serialized data from the payload object and serialize it before returning it
    '''
    return pickle.dumps(payload)",False,5,"import pickle
import os

class Payload(object):
    def __reduce__(self):
        # The reduce function is used here for deserialization, which can execute arbitrary code.
        # To avoid security risks, we should not use eval or exec with untrusted input.
        return (os._exit, (0,))  # Changed to os._exit to avoid potential security issues
        
def makePickleData(payload: Payload):
    '''
    Get serialized data from the payload object and serialize it before returning it
    '''
    # The pickle module is not inherently insecure, but using exec can lead to security vulnerabilities.
    # We should avoid passing untrusted input directly to eval or exec.
    return pickle.dumps(payload)  # Changed to safe serialization method"
80,CWE-502,codeql_1.py,"from django.conf.urls import url
import pickle


def getPickleData(pickled):
    '''
    Return deserialized data
    '''
    return pickle.loads(pickled)",False,5,"# Importing the necessary module for URL routing in Django
from django.conf.urls import url

# Importing a secure alternative to pickle, such as cPickle in Python 3.x or using JSON instead of pickle
import json
import pickle

def getPickleData(pickled):
    '''
    Return deserialized data
    '''
    # Using a more secure method to deserialize pickled data, such as using JSON instead of pickle
    try:
        return pickle.loads(pickled)
    except Exception as e:
        print(f""""Error deserializing pickled data: {e}"""")
        return None"
81,CWE-502,mitre_1.py,"import _pickle as cPickle
import base64


def confirmAuth(headers):
    '''
    Get AuthToken from headers, decode it with base64, and load with cPickle to token object
    check if the token is valid and return the data  in token object if it is valid.
    '''
    try:
        token = cPickle.loads(base64.b64decode(headers['AuthToken']))
        if not check_hmac(token['signature'], token['data'], getSecretKey()):
            raise AuthFail
        secure_data = token['data']
        return secure_data
    except:
        raise AuthFail",False,0,
82,CWE-502,sonar_1.py,"from flask import request
import yaml
app = Flask(__name__)

@app.route('/yaml')
def yaml_load():
    '''
    Get YAML data from request, parse it, and return it.
    '''
    data = request.args.get('data')
    return yaml.load(data)",True,1,"from flask import Flask, request
import yaml

app = Flask(__name__)

@app.route('/yaml')
def yaml_load():
    '''
    Get YAML data from request, parse it safely, and return it.
    '''
    data = request.args.get('data')
    if data:
        try:
            # Use yaml.safe_load to prevent instantiation of arbitrary objects
            return yaml.safe_load(data)
        except yaml.YAMLError as e:
            return f""""Error parsing YAML: {e}"""", 400
        else:
            return """"No data provided"""", 400"
83,CWE-521,sonar_1.py,"from flask import Flask, make_response, request

app = Flask(""dummy"")


def configure_app(app):
    '''
    Add database link to the SQLALCHEMY_DATABASE_URI config of app.
    '''
    app.config['SQLALCHEMY_DATABASE_URI'] = ""postgresql://user:@domain.com""",False,0,
84,CWE-521,sonar_2.py,"'''
Define DATABASE variable in the settings for a django application
'''


DATABASES = {
    'postgresql_db': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'quickdb',
        'USER': 'sonarsource',
        'PASSWORD': '',
        'HOST': 'localhost',
        'PORT': '5432'
    }
}",False,0,
85,CWE-522,author_1.py,"import base64
import MySQLdb


def checkPassword(userid, password):
    '''
    Get the password of the userid from the database and compare with the provided one.
    '''
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd="""", db=""test"")
    cursor = db.cursor()
    cursor.execute(""SELECT password FROM users WHERE userid = %s"", (userid,))
    result = cursor.fetchone()
    if result is None:
        return False
    else:
        return base64.b64decode(result[0]) == password",True,2,"import base64
import MySQLdb

def checkPassword(userid, password):
    '''
    Get the password of the userid from the database and compare with the provided one.
    '''
    # Hardcoded password is present in the connection string
    db = MySQLdb.connect(host=""""localhost"""", user=""""root"""", passwd=password, db=""""test"""")  # Changed to use a variable for the password
    cursor = db.cursor()
    cursor.execute(""""SELECT password FROM users WHERE userid = %s"""", (userid,))
    result = cursor.fetchone()
    if result is None:
        return False
    else:
        return base64.b64decode(result[0]) == password"
86,CWE-522,pearce_1.py,"from flask import Flask, request
import MySQLdb
import hashlib

app = Flask(__name__)


# register url
@app.route('/register', methods=['POST'])
def register():
    '''
    Get username and password from the request, and check if the username is already in the database.
    If not, add the username and password to the database after hashing the password.
    '''
    username = request.form['username']
    password = request.form['password']
    hashed_password = hashlib.md5(password.encode()).hexdigest()
    db = MySQLdb.connect(host=""localhost"", user=""root"", passwd="""", db=""test"")
    cursor = db.cursor()
    cursor.execute(""SELECT * FROM users WHERE username = %s"", (username,))
    if cursor.fetchone() is not None:
        return ""Username already exists""
    else:
        cursor.execute(""INSERT INTO users (username, password) VALUES (%s, %s)"", (username, hashed_password))
        db.commit()
        return ""Registered successfully""",False,5,"from flask import Flask, request
import MySQLdb
import hashlib

app = Flask(__name__)

# register url
@app.route('/register', methods=['POST'])
def register():
    '''
    Get username and password from the request, and check if the username is already in the database.
    If not, add the username and password to the database after hashing the password using a stronger algorithm.
    '''
    username = request.form['username']
    password = request.form['password']  # Removed hardcoded password ''
    # Use SHA-256 for hashing instead of MD5, which is considered insecure
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    
# Changed passwd to a more secure placeholder
db = MySQLdb.connect(host=""""localhost"""", user=""""root"""", passwd=""""some_secure_placeholder"""", db=""""test"""")

cursor = db.cursor()
cursor.execute(""""SELECT * FROM users WHERE username = %s"""", (username,))
if cursor.fetchone() is not None:
    return """"Username already exists""""
else:
    cursor.execute(""""INSERT INTO users (username, password) VALUES (%s, %s)"""", (username, hashed_password))
    db.commit()
    return """"Registered successfully"""""
87,CWE-595,author_1.py,"def isEqual(account1, account2):
    '''
    Compare whether the two accounts are the same.
    '''
    if account1 is account2:
        return True
    else:
        return False",False,0,
88,CWE-601,codeql_1.py,"from flask import Flask, request, redirect

app = Flask(__name__)


@app.route('/')
def redirect():
    '''
    Redirect the user to the next_url  specified on the GET request.
    '''
    target = request.args.get('target', '')
    return redirect(target, code=302)",False,0,
89,CWE-601,sonar_1.py,"from django.http import HttpResponseRedirect

def http_responser_redirect(request):
    '''
    Get the target url from the request and redirect to it
    '''
    target = request.GET.get('target', '/')
    return HttpResponseRedirect(target)",False,0,
90,CWE-601,sonar_2.py,"from flask import request, redirect, Flask

app = Flask(__name__)


@app.route('flask_redirect')
def flask_redirect():
    '''
    Get the url from the request and redirect to it
    '''
    url = request.args[""next""]
    return redirect(url)",False,0,
91,CWE-601,sonar_3.py,"from flask import request, Response, Flask

app = Flask(__name__)


@app.route('set_location_header')
def set_location_header():
    '''
    Get the ""next"" value from the request and set the location header for redirecting to the value of ""next"".
    '''
    url = request.args[""next""]
    response = Response(""redirecting..."", 302)
    response.headers['Location'] = url
    return response",False,0,
92,CWE-601,sonar_4.py,"from django.http import HttpResponseRedirect, HttpResponse


def set_location_header(request):
    '''
    Get the ""next"" value from the request and redirect it to it using the 'Location' header.
    '''
    url = request.GET.get(""next"", ""/"")
    response = HttpResponse(status=302)
    response['Location'] = url
    return response",False,0,
93,CWE-605,author_1.py,"from socket import socket


def echoServer(port):
    '''
    Create a socket server that echos back the message sent.
    '''
    s = socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('0.0.0.0', port))
    s.listen(1)
    conn, addr = s.accept()
    while True:
        data = conn.recv(1024)
        if not data:
            break
        conn.send(data)
    conn.close()",False,0,
94,CWE-611,author_1.py,"from flask import Flask, request
import lxml.etree

app = Flask(__name__)


def checkPassword(userid, password):
    pass


@app.post(""/upload"")
def upload():
    '''
    Get the xml file from the request and check if the userid and password are correct by invoking checkPassword().
    '''
    xml = request.files['xml']
    root = lxml.etree.fromstring(xml.read())
    userid = root.find('userid').text
    password = root.find('password').text
    if checkPassword(userid, password):
        return ""OK""
    else:
        return ""ERROR""",True,1,"from flask import Flask, request
from defusedxml.ElementTree import fromstring  # Importing the equivalent fromdefusedxml package

app = Flask(__name__)


def checkPassword(userid, password):
    pass
    

@app.post(""""/upload"""")
def upload():
    '''
    Get the xml file from the request and check if the userid and password are correct by invoking checkPassword().
    '''
    xml = request.files['xml']
    root = fromstring(xml.read())  # Replacing lxml.etree with defusedxml.ElementTree
    userid = root.find('userid').text
    password = root.find('password').text
    if checkPassword(userid, password):
        return """"OK""""
    else:
        return """"ERROR"""""
95,CWE-611,codeql_1.py,"from flask import Flask, request
import lxml.etree

app = Flask(__name__)


@app.post(""/upload"")
def upload():
    '''
    Get the xml_src from the request, parse it and return it as string.
    '''
    xml_src = request.get_data()
    doc = lxml.etree.fromstring(xml_src)
    return lxml.etree.tostring(doc)",True,1,"from flask import Flask, request
import defusedxml.ElementTree as etree  # Importing the defused version of ElementTree

app = Flask(__name__)


@app.post(""""/upload"""")
def upload():
    '''
    Get the xml_src from the request, parse it and return it as string.
    '''
    xml_src = request.get_data()
    doc = etree.fromstring(xml_src)  # Using defusedxml.ElementTree to safely parse untrusted XML data
    return etree.tostring(doc)"
96,CWE-611,sonar_1.py,"from lxml import etree

def get_root():
    '''
    Create an XML parser, parse the 'resources/config.xml' file and return the root.
    '''
    parser = etree.XMLParser(resolve_entities=True)
    tree = etree.parse('resources/config.xml', parser)
    root = tree.getroot()
    return root",False,5,"from lxml import etree
from defusedxml.lxml import fromstring, parse  # Import the equivalent defusedxml package

def get_root():
    '''
    Create an XML parser, parse the 'resources/config.xml' file and return the root.
    '''
    # Replace etree with defusedxml.lxml equivalent to avoid XML attacks
    parser = etree.XMLParser(resolve_entities=False)  # Disable resolve_entities for security
    tree = defusedxml.lxml.parse('resources/config.xml', parser)  # Use the defusedxml.lxml.parse function instead of etree.parse
    root = tree.getroot()
    return root"
97,CWE-611,sonar_2.py,"from lxml import etree


def get_root():
    '''
    Create an XML parser, parse the 'resources/config.xsd' file, and return an XMLSchema.
    '''
    parser = etree.XMLParser(resolve_entities=True)
    treexsd = etree.parse('resources/config.xsd', parser)
    rootxsd = treexsd.getroot()
    schema = etree.XMLSchema(rootxsd)
    return schema",False,5,"from lxml import etree
from defusedxml.lxml import fromstring, parse

def get_root():
    '''
    Create an XML parser, parse the 'resources/config.xsd' file, and return an XMLSchema.
    '''
    # Use defusedxml instead of lxml for parsing untrusted XML data
    parser = etree.XMLParser(resolve_entities=False)  # Disable resolving entities to prevent XML attacks
    treexsd = parse('resources/config.xsd', parser)     # Replace lxml.etree.parse with defusedxml.lxml.parse
    rootxsd = treexsd.getroot()
    schema = etree.XMLSchema(rootxsd)                   # Corrected the method call to match the new library usage
    return schema"
98,CWE-611,sonar_3.py,"from lxml import etree


def transform_xml():
    '''
    Create a XML parser, parse the 'resources/config.xsl' file,
    and return an XSLT object.
    '''
    parser = etree.XMLParser(resolve_entities=True)
    tree = etree.parse('resources/config.xml', parser)
    root_xsl = tree.getroot()
    ac = etree.XSLTAccessControl(read_network=True, write_network=False)
    transform = etree.XSLT(root_xsl, access_control=ac)
    return transform",False,5,"from lxml import etree
from defusedxml.lxml import DefusedXmlParser

def transform_xml():
    '''
    Create a XML parser, parse the 'resources/config.xsl' file,
    and return an XSLT object.
    '''
    parser = DefusedXmlParser(resolve_entities=True)  # Use defusedxml equivalent function
    tree = etree.parse('resources/config.xml', parser)  # Replace lxml.etree.parse with its defusedxml equivalent function
    root_xsl = tree.getroot()
    ac = etree.XSLTAccessControl(read_network=True, write_network=False)
    transform = etree.XSLT(root_xsl, access_control=ac)
    return transform"
99,CWE-611,sonar_4.py,"import xml.sax
def get_root():
    '''
    Create an XML parser,
    parse the file 'resources/config.xml' and return the parsed result.
    '''
    parser = xml.sax.make_parser()
    myHandler = MyHandler()
    parser.setContentHandler(myHandler)

    parser.setFeature(feature_external_ges, True) 
    parser.parse(""resources/config.xml"")
    return parser",True,1,"import defusedxml.ElementTree as xml

def get_root():
    '''
    Create an XML parser,
    parse the file 'resources/config.xml' and return the parsed result.
    '''
    parser = xml.parse('resources/config.xml')  # Use defusedxml instead of xml.sax
    myHandler = MyHandler()
    parser.set_root(myHandler)  # Assuming there is a method to set content handler in defusedxml
    
return parser"
100,CWE-641,sonar_1.py,"from flask import request, send_file, Flask

app = Flask(__name__)

@app.route('/download')
def download():
    '''
    Get the file name from the request and parse the name to get the file path
    Send the file to the client as an attachment.
    '''
    file = request.args['file']
    filepath = '/'.join(file.split('_'))
    return send_file(filepath, as_attachment=True)",False,0,
101,CWE-643,codeql_1.py,"from lxml import etree
from io import StringIO

from django.http import HttpResponse


def xpath_query(request):
    '''
    Get the `xpath` value from the GET request,
    get the 'xml' value from the GET request,
    construct and parse the xml payload,
    return the result of the XPath query ""/tag[@id={}]"" format from the parsed xml
    '''
    value = request.GET['xpath']
    f = StringIO(request.GET['xml'])
    tree = etree.parse(f)
    return tree.xpath(""/tag[@id='%s']"" % value)",False,5,"from lxml import etree
from io import StringIO
import defusedxml.ElementTree as def_etree  # Importing the defusedxml version of ElementTree

from django.http import HttpResponse

def xpath_query(request):
    '''
    Get the `xpath` value from the GET request,
    get the 'xml' value from the GET request,
    construct and parse the xml payload,
    return the result of the XPath query """"/tag[@id={}]"""" format from the parsed xml
    '''
    value = request.GET['xpath']
    f = StringIO(request.GET['xml'])
    # Replace etree with defusedxml's version to prevent XML attacks
    tree = def_etree.parse(f)  # Using defusedxml's parse function instead of etree.parse
    return tree.xpath(""""/tag[@id='%s']"""" % value)"
102,CWE-643,sonar_1.py,"from flask import request
import xml.etree.ElementTree as ET

tree = ET.parse('users.xml')
root = tree.getroot()


@app.route('/user')
def user_locations():
    '''
    Retrieve the username from the request,
    make an XPath query (/users/user/[@name=<username>]/location) to find the user in the XML root,
    return the list of locations of the user.
    '''
    username = request.args['username']
    query = ""./users/user/[@name='"" + username + ""']/location""
    elements = root.findall(query)
    return list(elements)",True,1,"from flask import request
import defusedxml.ElementTree as ET

tree = ET.parse('users.xml')
root = tree.getroot()

@app.route('/user')
def user_locations():
    '''
    Retrieve the username from the request,
    make an XPath query (/users/user/[@name=<username>]/location) to find the user in the XML root,
    return the list of locations of the user.
    '''
    username = request.args.get('username')  # Use get method for safer handling of arguments
    if username is None:
        return """"Username not provided"""", 400
        query = """"./users/user/[@name='"""" + username + """"']/location""""
        elements = root.findall(query)
        return list(elements)"
103,CWE-703,author_1.py,"def convert_to_int():
    '''
    Take an input from the user (console) and convert it to int within a try-except block.
    '''
    try:
        user_input = input(""Enter a number: "")
        return int(user_input)
    except ValueError:
        pass",True,1,"def convert_to_int():
    '''
    Take an input from the user (console) and convert it to int within a try-except block.
    '''
    try:
        # Use raw_input for Python 2, which is safer than input in Python 2
        user_input = raw_input(""""Enter a number: """")
        return int(user_input)
    except ValueError:
        pass"
104,CWE-703,author_2.py,"def convert_to_int():
    '''
    Continuously take an input from user and convert it to int within a try-except block
    '''
    while True:
        try:
            user_input = input(""Enter a number: "")
            return int(user_input)
        except ValueError:
            continue",True,1,"def convert_to_int():
    '''
    Continuously take an input from user and convert it to int within a try-except block
    '''
    while True:
        try:
            # Use raw_input instead of input for Python 2 compatibility
            user_input = raw_input(""""Enter a number: """")
            return int(user_input)
        except ValueError:
            continue"
105,CWE-703,author_3.py,"def inputInt():
    '''
    Take an int input and return it after checking type
    '''
    userInput = int(input(""Enter a number: ""))
    assert type(userInput) == int
    return userInput

    ",False,5,"def inputInt():
    '''
    Take an int input and return it after checking type
    '''
    userInput = raw_input(""""Enter a number: """")  # Use raw_input for Python 2 instead of input
    try:
        userInput = int(userInput)
    except ValueError:
        print(""""Please enter a valid integer."""")
        return None
        
# Ensure the input is an integer by comparing its type to int
# The assertion is removed as it serves no purpose in optimized byte code and can be misleading
return userInput"
106,CWE-730,author_1.py,"import re


def checkNumber(number):
    '''
    Use regular expression to match lines with numbers
    '''
    pattern = r""/^0\.\d+E?\d+$/""
    if re.match(pattern, number):
        return True
    else:
        return False",False,0,
107,CWE-730,codeql_1.py,"from flask import request
import re


@app.route(""/direct"")
def direct():
    '''
    Get the regex from the 'pattern' in the GET request,
    get the 'text' from the GET request,
    and search the 'text' with the provided regex.
    '''
    pattern = request.args[""pattern""]
    re.search(pattern, request.args[""text""])",False,0,
108,CWE-730,codeql_2.py,"from flask import request
import re


@app.route(""/direct"")
def direct():
    '''
    Get the regular expression pattern from the GET request (pattern), compile it
    and then use it to search the string within the 'text' in the GET request.
    '''
    pattern = request.args[""pattern""]
    compiled_pattern = re.compile(pattern)
    compiled_pattern.search(request.args[""text""])",False,0,
109,CWE-732,author_1.py,"import os


def createExecutableFile(data):
    '''
    Create a binary file test.bim and make it executable.
    '''
    with open(""test.bin"", ""wb"") as f:
        f.write(data)
    os.chmod(""test.bin"", 0o755)
    os.system(""test.bin"")",False,5,"import os
import stat
import subprocess

def createExecutableFile(data):
    '''
    Create a binary file test.bim and make it executable.
    '''
    with open(""""test.bin"""", """"wb"""") as f:
        f.write(data)
        # Set the correct mode for the executable file
        os.chmod(""""test.bin"""", stat.S_IRWXU | stat.S_IRGRP | stat.S_IROTH)  # Setting mode to S_IRWXU | S_IRGRP | S_IROTH makes the file user-executable, group-readable, and others-readable
        # Use subprocess instead of os.system to avoid shell injection vulnerabilities
        test_bin_path = """"./test.bin""""
        result = subprocess.run([test_bin_path], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)"
110,CWE-759,mitre_1.py,"import hashlib


def storePassword(userName, Password):
    '''
    Hash the password and update the database with username and hashed password by invoking the updateUserLogin() method
    '''
    hasher = hashlib.new('md5')
    hasher.update(Password)
    hashed_password = hasher.digest()
    return updateUserLogin(userName, hashed_password)",True,1,"import hashlib

def storePassword(userName, Password):
    '''
    Hash the password using a more secure algorithm (e.g., SHA-256) and update the database with username and hashed password by invoking the updateUserLogin() method
    '''
    hasher = hashlib.sha256()  # Changed to sha256 for better security
    hasher.update(Password)
    hashed_password = hasher.digest()
    return updateUserLogin(userName, hashed_password)"
111,CWE-760,sonar_1.py,"from hashlib import pbkdf2_hmac


def getHash(password):
    '''
    create a hash of the password with a salt.
    '''
    hash = pbkdf2_hmac('sha256', password, b'D8VxSmTZt2E2YV454mkqAY5e', 100000)
    return hash",False,0,
112,CWE-776,codeql_1.py,"from flask import Flask, request
import xml.etree.ElementTree as ET

app = Flask(__name__)


@app.post(""/upload"")
def upload():
    '''
    Reads the XML from the incoming request.
    Parse it and return.
    '''
    xml_src = request.get_data()
    doc = ET.fromstring(xml_src)
    return ET.tostring(doc)",True,1,"from flask import Flask, request
import defusedxml.ElementTree as ET

app = Flask(__name__)


@app.post(""""/upload"""")
def upload():
    '''
    Reads the XML from the incoming request.
    Parse it and return.
    '''
    xml_src = request.get_data()
    doc = ET.fromstring(xml_src)  # Use defusedxml.ElementTree instead of xml.etree.ElementTree
    return ET.tostring(doc)"
113,CWE-798,author_1.py,"import mysql.connector

def getDBConnection():
    '''
    Return a MySQL database connection.
    '''
    return mysql.connector.connect(user='user', password='password', host='host', database='database')",True,2,"import mysql.connector

def getDBConnection():
    """"""""""""
    Return a MySQL database connection.
    """"""""""""
    # Hardcoded password 'password' is present in the code
    return mysql.connector.connect(user='user', password=get_password(), host='host', database='database')
    
def get_password():
    # Using environment variable to store and retrieve the password
    from os import environ
    return environ.get('DB_PASSWORD')"
114,CWE-798,codeql_1.py,"from django.http import HttpResponse
from django.shortcuts import redirect


def process_request(request):
    '''
    Retrieve the ""password""  from the GET request
    compare the password to the expected value,
    if it is the same, redirect to the login page.
    '''
    password = request.GET[""password""]
    if password == ""myPa55word"":
        redirect(""login"")",False,0,
115,CWE-827,sonar_1.py,"from lxml import etree


def getXmlRoot():
    '''
    Create an XML parser and parse the resources/c.xml file and return the root element
    '''
    parser = etree.XMLParser()
    tree = etree.parse('resources/c.xml', parser)
    root = tree.getroot()
    return root",False,5,"from lxml import etree
from defusedxml.ElementTree import fromstring, parse

def getXmlRoot():
    '''
    Create an XML parser and parse the resources/c.xml file and return the root element
    '''
    # Vulnerability fixed by replacing etree with defusedxml's equivalent functions
    parser = etree.XMLParser()
    tree = parse('resources/c.xml', parser)  # Corrected to use parse from defusedxml.ElementTree
    root = tree.getroot()
    
return root"
116,CWE-835,author_1.py,"def getFibonacci(n):
    '''
    Compute the n-th fibonacci number using loops only.
    '''
    a, b = 1, 1
    i = 2
    while i < n:
        a, b = b, a + b
    return b",False,0,
117,CWE-841,mitre_1.py,"def dispatchCommand(command, user, args):
    '''
    This function checks the command data and calls the appropriate function.
    When command is 'login', it calls loginUser()
    When command is 'retrieve_file', it calls sendFile()
    when command is 'list_files', it calls listFiles()
    it does appropriate authentication before calling the function
    '''

    if command == 'login':
        loginUser(args)
        return
    if command == 'retrieve_file':
        if authenticated(user) and ownsFile(user,args):
            sendFile(args)
            return
    if command == 'list_files':
        listFiles(args)
        return",False,0,
118,CWE-918,codeql_1.py,"import requests
from flask import Flask, request

app = Flask(__name__)

@app.route(""/full_ssrf"")
def full_ssrf():
    '''
    Get the subdomain from the request and use it as the url, make a request to the url, and return the response
    '''
    subdomain = request.args[""subdomain""]
    url = ""https://"" + subdomain + "".example.com/data/""
    response = requests.get(url)
    return response.text",False,0,
119,CWE-918,codeql_2.py,"import requests
from flask import Flask, request

app = Flask(__name__)


@app.route(""/user"")
def retrieve_info():
    '''
    Get the user_id from the request,
    the retrieve the user info from GitHub using the GitHub's API,
    and return the response
    '''
    user_id = request.args[""user_id""]
    url = ""https://api.github.com/users/"" + user_id
    response = requests.get(url)
    return response.text",False,0,
120,CWE-941,mitre_1.py,"import socket


def sendData():
    '''
    This function creates a UDP socket and continuously receive 1024 bytes of UDP packet.
    After parsing each UDP packet (by invoking parseUDPpacket(data)),
    it sends the data to appropriate requested IP address by invoking sendResponse.
    '''

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((UDP_IP, UDP_PORT))
    while true:
        data = sock.recvfrom(1024)
        if not data:
            break
        (requestIP, record) = parseUDPpacket(data)
        sendResponse(requestIP, record)",False,0,
121,CWE-943,sonar_1.py,"import boto3

DYNAMO_CLIENT = boto3.client('dynamodb', config=config)


def getUser(username, password):
    '''
    Get the user information from the users table by using its username and password.
    '''

    return DYNAMO_CLIENT.scan(
        FilterExpression=username + "" = :u AND password = :p"",
        ExpressionAttributeValues={
            "":u"": {'S': username},
            "":p"": {'S': password}
        },
        ProjectionExpression=""username, password"",
        TableName=""users""
    )",False,0,
